from datetime import datetime
from enum import Enum

# ============================================================
# üåç Lista de pa√≠ses prohibidos
# ============================================================
BANNED_COUNTRIES = {"China", "Vietnam", "India", "Ir√°n"}

"""
===========================================================
üè¶ Tipos de tarjeta disponibles en el sistema
===========================================================

- Classic  ‚Üí Sin beneficios adicionales.
- Gold     ‚Üí Beneficios medios (requiere ingresos m√≠nimos).
- Platinum ‚Üí Beneficios altos (requiere ingresos y membres√≠a VISE CLUB).
- Black    ‚Üí Beneficios premium (con restricciones).
- White    ‚Üí M√°ximo nivel de beneficios (con restricciones).
"""
class CardType(str, Enum):
    CLASSIC = "Classic"
    GOLD    = "Gold"
    PLAT    = "Platinum"
    BLACK   = "Black"
    WHITE   = "White"


# ============================================================
# üë§ Validaci√≥n de clientes
# ============================================================

def validate_client(card_type: str, income: float, vise_club: bool, country: str) -> tuple[bool, str]:
    """
    Valida si un cliente cumple los requisitos para registrarse con un tipo de tarjeta.

    Reglas:
    - Gold ‚Üí Ingreso m√≠nimo 500 USD.
    - Platinum ‚Üí Ingreso m√≠nimo 1000 USD y pertenencia a VISE CLUB.
    - Black/White ‚Üí Ingreso m√≠nimo 2000 USD, pertenencia a VISE CLUB y no residir en pa√≠ses prohibidos.

    Args:
        card_type (str): Tipo de tarjeta solicitada.
        income (float): Ingreso mensual declarado.
        vise_club (bool): Indica si pertenece al VISE CLUB.
        country (str): Pa√≠s de residencia.

    Returns:
        (bool, str): Resultado de validaci√≥n y mensaje asociado.
    """
    if card_type == CardType.GOLD and income < 500:
        return False, "El cliente no cumple con el ingreso m√≠nimo de 500 USD para Gold"

    if card_type == CardType.PLAT:
        if income < 1000:
            return False, "El cliente no cumple con el ingreso m√≠nimo de 1000 USD para Platinum"
        if not vise_club:
            return False, "El cliente no cumple con la suscripci√≥n VISE CLUB requerida para Platinum"

    if card_type in (CardType.BLACK, CardType.WHITE):
        if income < 2000:
            return False, "El cliente no cumple con el ingreso m√≠nimo de 2000 USD"
        if not vise_club:
            return False, "El cliente no cumple con la suscripci√≥n VISE CLUB requerida"
        if country in BANNED_COUNTRIES:
            return False, f"El cliente con tarjeta {card_type} no puede residir en {country}"

    return True, "Cliente apto"


# ============================================================
# üåê Validaci√≥n de compras
# ============================================================

def validate_purchase(card_type: str, purchase_country: str) -> tuple[bool, str | None]:
    """
    Valida si un cliente puede realizar una compra en un pa√≠s espec√≠fico.

    Reglas:
    - Clientes con tarjeta Black o White no pueden comprar desde pa√≠ses prohibidos.

    Args:
        card_type (str): Tipo de tarjeta del cliente.
        purchase_country (str): Pa√≠s donde se intenta realizar la compra.

    Returns:
        (bool, str | None): Resultado de validaci√≥n y mensaje de error (si aplica).
    """
    if card_type in (CardType.BLACK, CardType.WHITE) and purchase_country in BANNED_COUNTRIES:
        return False, f"El cliente con tarjeta {card_type} no puede realizar compras desde {purchase_country}"
    return True, None


# ============================================================
# üí∏ C√°lculo de descuentos
# ============================================================

def calculate_discount(card_type: str, amount: float, date: datetime, purchase_country: str, client_country: str) -> tuple[float, str | None]:
    """
    Calcula el descuento aplicable a una compra seg√∫n reglas de negocio.

    Prioridad:
    1Ô∏è‚É£ Compras en el exterior ‚Üí 5%
    2Ô∏è‚É£ Descuentos por d√≠a y monto seg√∫n el tipo de tarjeta

    Reglas:
    - Classic ‚Üí No aplica descuento.
    - Gold ‚Üí 15% Lunes-Mi√©rcoles si el monto > 100.
    - Platinum ‚Üí 20% Lunes-Mi√©rcoles (>100), 30% S√°bados (>200), 5% exterior.
    - Black ‚Üí 25% Lunes-Mi√©rcoles (>100), 35% S√°bados (>200), 5% exterior.
    - White ‚Üí 25% Lunes-Viernes (>100), 35% Fin de semana (>200), 5% exterior.

    Args:
        card_type (str): Tipo de tarjeta.
        amount (float): Monto de la compra.
        date (datetime): Fecha de la compra.
        purchase_country (str): Pa√≠s donde se realiza la compra.
        client_country (str): Pa√≠s de residencia del cliente.

    Returns:
        tuple[float, str | None]: (tasa de descuento, descripci√≥n del beneficio)
    """

    wd = date.weekday()  # 0=Lunes ... 6=Domingo

    # --- CLASSIC ---
    if card_type == CardType.CLASSIC:
        return 0.0, None

    # --- GOLD ---
    if card_type == CardType.GOLD:
        if wd in (0, 1, 2) and amount > 100:
            return 0.15, "Lunes - Mi√©rcoles 15%"
        return 0.0, None

    # --- PLATINUM ---
    elif card_type == CardType.PLAT:
        if purchase_country != client_country:
            return 0.05, "Exterior 5%"
        if wd in (0, 1, 2) and amount > 100:
            return 0.20, "Lunes - Mi√©rcoles 20%"
        if wd == 5 and amount > 200:
            return 0.30, "S√°bado 30%"
        return 0.0, None

    # --- BLACK ---
    elif card_type == CardType.BLACK:
        if purchase_country != client_country:
            return 0.05, "Exterior 5%"
        if wd in (0, 1, 2) and amount > 100:
            return 0.25, "Lunes - Mi√©rcoles 25%"
        if wd == 5 and amount > 200:
            return 0.35, "S√°bado 35%"
        return 0.0, None

    # --- WHITE ---
    elif card_type == CardType.WHITE:
        # üö® Prioridad: exterior antes que d√≠a
        if purchase_country != client_country:
            return 0.05, "Exterior 5%"
        if wd in (0, 1, 2, 3, 4) and amount > 100:
            return 0.25, "Lunes - Viernes 25%"
        if wd in (5, 6) and amount > 200:
            return 0.35, "Fin de semana 35%"
        return 0.0, None

    return 0.0, None
