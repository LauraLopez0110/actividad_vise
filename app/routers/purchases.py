from fastapi import APIRouter, Depends
from fastapi.responses import JSONResponse
from sqlalchemy.orm import Session
from app.database import get_db
from app import models, schemas
from app.rules import validate_purchase, calculate_discount

"""
===========================================================
üì¶ M√≥dulo: purchases.py
===========================================================

üß≠ Prop√≥sito:
Gestiona las operaciones relacionadas con las compras de los clientes en el sistema VISE API.

üìë Flujo principal:
1Ô∏è‚É£ Verifica que el cliente exista en la base de datos.
2Ô∏è‚É£ Valida si la compra est√° permitida (por pa√≠s o tipo de tarjeta).
3Ô∏è‚É£ Calcula el descuento aplicable y el beneficio asociado seg√∫n reglas de negocio.
4Ô∏è‚É£ Registra la compra en la base de datos.
5Ô∏è‚É£ Devuelve una respuesta con los detalles de la transacci√≥n.

üîí Validaciones:
- Los clientes con tarjetas BLACK o WHITE no pueden comprar desde pa√≠ses prohibidos.
- Las reglas de descuento se aplican seg√∫n tipo de tarjeta, d√≠a de la semana, monto y pa√≠s.

üì¶ Respuestas:
- 200 ‚Üí Compra registrada y aprobada.
- 400 ‚Üí Compra rechazada (validaci√≥n o pa√≠s prohibido).

===========================================================
"""

router = APIRouter(tags=["Purchases"])


@router.post(
    "/purchase",
    responses={
        200: {"model": schemas.PurchaseResponse, "description": "Compra registrada exitosamente."},
        400: {"model": schemas.PurchaseResponse, "description": "Compra rechazada por validaci√≥n o pa√≠s prohibido."},
    },
)
def make_purchase(data: schemas.PurchaseCreate, db: Session = Depends(get_db)):
    """
    üõí Registrar una nueva compra en el sistema.

    Args:
        data (schemas.PurchaseCreate): Informaci√≥n de la compra recibida desde el cuerpo del request.
        db (Session): Sesi√≥n de base de datos inyectada autom√°ticamente por FastAPI.

    Returns:
        dict | JSONResponse:
            - Si la compra es v√°lida ‚Üí status 200 con detalle de la transacci√≥n.
            - Si es rechazada ‚Üí status 400 con mensaje de error.

    Ejemplo de request:
    ```json
    {
      "clientId": 1,
      "amount": 250.75,
      "currency": "USD",
      "purchaseDate": "2025-10-06T12:00:00Z",
      "purchaseCountry": "Colombia"
    }
    ```

    Ejemplo de respuesta (200 OK):
    ```json
    {
      "status": "Approved",
      "purchase": {
        "clientId": 1,
        "originalAmount": 250.75,
        "discountApplied": 37.61,
        "finalAmount": 213.14,
        "benefit": "S√°bado 30%"
      }
    }
    ```

    Ejemplo de respuesta (400 Bad Request):
    ```json
    {
      "status": "Rejected",
      "error": "El cliente con tarjeta Black no puede realizar compras desde China"
    }
    ```
    """

    # 1Ô∏è‚É£ Verificar existencia del cliente
    client = db.query(models.Client).filter(models.Client.id == data.clientId).first()
    if not client:
        return JSONResponse(
            status_code=400,
            content={"status": "Rejected", "error": "Cliente no encontrado"}
        )

    # 2Ô∏è‚É£ Validar si la compra est√° permitida seg√∫n tipo de tarjeta y pa√≠s
    ok, err = validate_purchase(client.card_type, data.purchaseCountry)
    if not ok:
        return JSONResponse(
            status_code=400,
            content={"status": "Rejected", "error": err}
        )

    # 3Ô∏è‚É£ Calcular descuento y beneficio seg√∫n las reglas de negocio
    rate, benefit = calculate_discount(
        client.card_type,
        data.amount,
        data.purchaseDate,
        data.purchaseCountry,
        client.country
    )

    discount = round(data.amount * rate, 2)
    final = round(data.amount - discount, 2)

    # 4Ô∏è‚É£ Registrar la compra en la base de datos
    purchase = models.Purchase(
        client_id=client.id,
        amount=data.amount,
        currency=data.currency,
        purchase_date=data.purchaseDate,
        purchase_country=data.purchaseCountry,
    )
    db.add(purchase)
    db.commit()
    db.refresh(purchase)

    # 5Ô∏è‚É£ Retornar resultado final
    return {
        "status": "Approved",
        "purchase": {
            "clientId": client.id,
            "originalAmount": data.amount,
            "discountApplied": discount,
            "finalAmount": final,
            "benefit": benefit
        }
    }
